#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Modified keymap based on personal experience, with some improvements based on Miryoku layout.

#define BASE    0
#define NAV     1
#define MOU     2
#define BTN     2
#define MED     3
#define NUM     4
#define SYM     5
#define FUN     6

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hmp: homerow_mods_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Combos for media player.
        // I often switch songs while drawing, so I assign the
        // combos on left hand side.

        combo_med_next {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp C_NEXT>;
        };
        combo_med_prev {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp C_PREV>;
        };
        combo_med_pp {
            timeout-ms = <50>;
            key-positions = <1 4>;
            bindings = <&kp C_PP>;
        };
        combo_med_stop {
            timeout-ms = <50>;
            key-positions = <1 3>;
            bindings = <&kp C_STOP>;
        };
        combo_med_vol_up {
            timeout-ms = <50>;
            key-positions = <2 13>;
            bindings = <&kp C_VOL_UP>;
        };
        combo_med_vol_dn {
            timeout-ms = <50>;
            key-positions = <3 12>;
            bindings = <&kp C_VOL_DN>;
        };
        combo_med_mute {
            timeout-ms = <50>;
            key-positions = <12 14>;
            bindings = <&kp C_MUTE>;
        };

        // combo for toggling illust layer
        combo_tg_illust {
            timeout-ms = <50>;
            key-positions = <21 22 23>;
            bindings = <&tog ILLUST>;
        };

        // Combo for toggling the Colemak layout
        combo_tg_colemak {
            timeout-ms = <50>;
            key-positions = <6 7 8>;
            bindings = <&tog COLDH>;
        };

        // Combo for toggling minimal game layout
        combo_tg_game {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&tog GAME>;
        };

        // Combo for bluetooth control
        // (i.e. switch among the devices).
        combo_bt_next {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&bt BT_NXT>;
        };
        combo_bt_prev {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&bt BT_PRV>;
        };
        combo_bt_clr_all {
            timeout-ms = <50>;
            key-positions = <0 9>;
            bindings = <&bt BT_CLR_ALL>;
        };
        combo_bt_out_tog {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&out OUT_TOG>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        colemak_dh {
            bindings = <
    &kp Q       &kp W       &kp F           &kp P           &kp B           &kp J           &kp L           &kp U       &kp Y           &kp SQT
    &hmp LGUI A &hm LALT R  &hm LCTRL S     &hm LSHFT T     &kp G           &kp M           &hm LSHFT N     &hm LCTRL E &hm LALT I      &hmp LGUI O
    &lt BTN Z   &hm RALT X  &kp C           &kp D           &kp V           &kp K           &kp H           &kp COMMA   &hm RALT DOT    &lt BTN FSLH
                            &lt MED ESC     &lt NAV SPACE   &lt MOU TAB     &lt SYM RET     &lt NUM BSPC    &lt FUN DEL
            >;
        };

        nav_layer {
            bindings = <
    &none       &none       &none       &none       &none       &kp HOME    &kp LEFT        &kp DOWN    &kp UP          &kp RIGHT    
    &kp LSHFT   &kp LCTRL   &kp LALT    &kp LGUI    &none       &kp END     &kp LEFT        &kp DOWN    &kp UP          &kp RIGHT
    &none       &none       &none       &none       &none       &kp HOME    &kp PG_UP       &kp PG_UP   &kp PG_DN       &kp HOME
                            &none       &none       &none       &kp LC(X)   &kp LC(C)       &kp LC(V)     
            >;
        };

        med_layer {
            bindings = <
    &none       &none       &none       &none       &none       &kp C_PREV    &kp C_PLAY       &kp C_PAUSE      &kp PG_DN       &kp C_NEXT    
    &none       &kp LSHFT   &kp LCTRL   &kp LALT    &kp LGUI    &kp END         &kp LEFT        &kp DOWN    &kp RIGHT       &kp INS
    &none       &none       &none       &none       &none       &bt BT_SEL 0   &bt BT_SEL 1    &bt BT_SEL 2 &bt BT_SEL 3   &bt BT_SEL 4
                            &none       &none       &none       &kp LC(X)   &kp LC(C)       &kp LC(V)     
            >;
        };

        sym_layer {
            bindings = <
    AS(LBKT)        AS(N7)      AS(N8)      AS(N9)  AS(RBKT)    &none       &none       &none       &none       &none
    AS(SEMI)        AS(N4)      AS(N5)      AS(N6)  AS(EQUAL)   &none       &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   
    AS(GRAVE)       AS(N1)      AS(N2)      AS(N3)  AS(BSLH)    &none       &none       &none       &none       &none       
                                &as LPAR DOT    &as RPAR N0     AS(MINUS)   &none       &trans      &none       
            >;
        };

        num_layer {
            bindings = <
    LBKT        N7      N8      N9  RBKT   &none       &none       &none       &none       &none
    SEMI        N4      N5      N6  EQUAL   &none       &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   
    GRAVE       N1      N2      N3  BSLH    &none       &none       &none       &none       &none       
                                &as LPAR DOT    &as RPAR N0     AS(MINUS)   &none       &trans      &none       
            >;
        };

        fun_layer {
            bindings = <
    &kp F12 &kp F7  &kp F8      &kp F9      &kp PSCRN       &none   &none       &none       &none       &none
    &kp F11 &kp F4  &kp F5      &kp F6      &kp SLCK        &none   &kp LSHFT   &kp LCTRL   &kp LALT    &kp LGUI
    &kp F10 &kp F1  &kp F2      &kp F3      &kp PAUSE_BREAK &none   &none       &none       &none       &none
                    &kp K_APP   &kp SPACE   &kp TAB         &none   &none       &trans
            >;
        };

    };
};